C51 COMPILER V9.56.0.0   BIGFONT                                                           06/03/2021 14:52:33 PAGE 1   


C51 COMPILER V9.56.0.0, COMPILATION OF MODULE BIGFONT
OBJECT MODULE PLACED IN .\Objects\BigFont.obj
COMPILER INVOKED BY: C:\Program Files\Keil\C51\BIN\C51.EXE BigFont.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.
                    -\Listings\BigFont.lst) TABS(2) OBJECT(.\Objects\BigFont.obj)

line level    source

   1          #include <Display.h>
   2          #include <FontDisplay.h>
   3          #include <Menu.h>
   4          int i = 0, j = 0;
   5          int first, second, third;
   6          unsigned char brightness = 0x0F;
   7          
   8                                      /*                0                     1                     2                     3                   4                     5                     6                   
             -    7                      8       */
   9          code unsigned char number_0[252]={0x00,0x00,0x00,0x80, 0xC0,0xE0,0xF0,0xF8, 0xFC,0xFC,0xFE,0x7E,  0x7E,0x3F
             -,0x3F,0x1F,  0x1F,0x1F,0x1F,0x1F, 0x1F,0x3F,0x3F,0x7E,  0x7E,0xFE,0xFC,0xFC,  0xF8,0xF0,0xE0,0xC0,  0x80,0x00,0x00,0x00,
  10                                            0x00,0xF0,0xFE,0xFF, 0xFF,0xFF,0x7F,0x0F, 0x03,0x01,0x00,0x00,  0x00,0x00,0x00,0x00,  0x00,
             -0x00,0x00,0x00, 0x00,0x00,0x00,0x00,  0x00,0x00,0x01,0x03,  0x0F,0x7F,0xFF,0xFF,  0xFF,0xFE,0xF0,0x00,
  11                                            0xFF,0xFF,0xFF,0xFF, 0xFF,0xFF,0x00,0x00,  0x00,0x00,0x00,0x00,  0x00,0x00,0x00,0x00,  0x
             -00,0x00,0x00,0x00,  0x00,0x00,0x00,0x00,  0x00,0x00,0x00,0x00,  0x00,0x00,0xFF,0xFF,  0xFF,0xFF,0xFF,0xFF,
  12                                            0xFF,0xFF,0xFF,0xFF, 0xFF,0xFF,0x00,0x00,  0x00,0x00,0x00,0x00,  0x00,0x00,0x00,0x00,  0x
             -00,0x00,0x00,0x00,  0x00,0x00,0x00,0x00,  0x00,0x00,0x00,0x00,  0x00,0x00,0xFF,0xFF,  0xFF,0xFF,0xFF,0xFF,
  13                                            0x0F,0xFF,0xFF,0xFF, 0xFF,0xFF,0xE0,0x00,  0x00,0x00,0x00,0x00,  0x00,0x00,0x00,0x00,  0x
             -00,0x00,0x00,0x00,  0x00,0x00,0x00,0x00,  0x00,0x00,0x00,0x00,  0x00,0xE0,0xFF,0xFF,  0xFF,0xFF,0xFF,0x0F,
  14                                            0x00,0x00,0x07,0x1F, 0x3F,0x7F,0xFF,0xFF,  0xFC,0xF8,0xF0,0xE0,  0xE0,0xC0,0xC0,0x80, 0x8
             -0,0x80,0x80,0x80, 0x80,0xC0,0xC0,0xE0,  0xE0,0xF0,0xF8,0xFC,  0xFF,0xFF,0x7F,0x3F,  0x1F,0x07,0x00,0x00,
  15                                            0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x01,  0x03,0x03,0x07,0x07, 0x07,0x0F,0x0F,0x0F,  0x0F
             -,0x0F,0x0F,0x0F,  0x0F,0x0F,0x0F,0x07,  0x07,0x07,0x03,0x03,  0x01,0x00,0x00,0x00,  0x00,0x00,0x00,0x00};   
  16          
  17          code unsigned char number_1[252]={0x00,0x00,0x00,0x00, 0x00,0x80,0x80,0xC0, 0xE0,0xE0,0xF0,0xF8,0xF8,  0xF
             -C,0xFE,0xFE,0x7F, 0x7F,0xFF,0xFF,0xFF,    0xFF,0xFF,0xFF,0x00,  0x00,0x00,0x00,0x00,  0x00,0x00,0x00,0x00,  0x00,0x00,0x00,/*
             -35*/
  18                                       /*36*/0x00,0x00,0x00,0x00,0x7F, 0x3F,0x3F,0x1F,0x0F,  0x0F,0x07,0x03,0x03, 0x01,0x00,0x00,0
             -x00, 0x00,0xFF,0xFF,0xFF,   0xFF,0xFF,0xFF,0x00,  0x00,0x00,0x00,0x00,  0x00,0x00,0x00,0x00,  0x00,0x00,0x00,/*71*/
  19                                       /*72*/0x00,0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00,  0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0
             -x00, 0x00,0xFF,0xFF,0xFF,   0xFF,0xFF,0xFF,0x00,  0x00,0x00,0x00,0x00,  0x00,0x00,0x00,0x00,  0x00,0x00,0x00,/*107*/
  20                                      /*108*/0x00,0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00,  0x00,0x00,0x00,0x00, 0x00,0x00,0x00,
             -0x00, 0x00,0xFF,0xFF,0xFF,    0xFF,0xFF,0xFF,0x00,  0x00,0x00,0x00,0x00,  0x00,0x00,0x00,0x00,  0x00,0x00,0x00,/*143*/
  21                                      /*144*/0x00,0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00,  0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0
             -x00, 0x00,0xFF,0xFF,0xFF,   0xFF,0xFF,0xFF,0x00,  0x00,0x00,0x00,0x00,  0x00,0x00,0x00,0x00,  0x00,0x00,0x00,/*179*/
  22                                      /*180*/0x00,0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00,  0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0
             -x00, 0x00,0xFF,0xFF,0xFF,   0xFF,0xFF,0xFF,0x00,  0x00,0x00,0x00,0x00,  0x00,0x00,0x00,0x00,  0x00,0x00,0x00,/*215*/
  23                                      /*216*/0x00,0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00,  0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0
             -x00, 0x00,0x0F,0x0F,0x0F,   0x0F,0x0F,0x0F,0x00,  0x00,0x00,0x00,0x00,  0x00,0x00,0x00,0x00,  0x00,0x00,0x00};  
  24          
  25          code unsigned char number_2[252]={0x00,0x00,0x00,0x00, 0xC0,0xE0,0xF0,0xF8, 0xFC,0xFC,0xFE,0x7E,0x3F, 0x3F
             -,0x3F,0x1F,0x1F, 0x1F,0x1F,0x3F,0x3F, 0x3F,0x7F,0xFE,0xFE,  0xFC,0xFC,0xF8,0xF0,  0xE0,0xC0,0x00,0x00,  0x00,0x00,0x00,
  26                                             0x00,0x00,0x7E,0x7F,0x7F, 0x7F,0x7F,0x0F,0x03, 0x01,0x00,0x00,0x00, 0x00,0x00,0x00,0x00,
             - 0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00,  0x01,0x07,0xFF,0xFF,  0xFF,0xFF,0xFF,0xFC,  0x00,0x00,0x00,
  27                                             0x00,0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00,
             - 0x00,0x00,0x00,0x00, 0x00,0x00,0x80,0xC0,  0xF0,0xFC,0xFF,0xFF,  0xFF,0x7F,0x1F,0x07,  0x00,0x00,0x00,
  28                                             0x00,0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00, 0x00,0x00,0x80,0xC0,
             - 0xE0,0xF0,0xF8,0xFC, 0xFE,0xFF,0x7F,0x3F,  0x1F,0x0F,0x07,0x03,  0x01,0x00,0x00,0x00,  0x00,0x00,0x00,
  29                                             0x00,0x00,0x00,0x00,0x00, 0x00,0x00,0x80,0xC0, 0xE0,0xF0,0xF8,0xFC, 0xFE,0xFF,0x7F,0x3F,
             - 0x1F,0x0F,0x07,0x03, 0x01,0x00,0x00,0x00,  0x00,0x00,0x00,0x00,  0x00,0x00,0x00,0x00,  0x00,0x00,0x00,
  30                                             0x00,0x00,0xF0,0xF8,0xFC, 0xFE,0xFF,0xFF,0xBF, 0x9F,0x8F,0x87,0x83, 0x81,0x80,0x80,0x80,
             - 0x80,0x80,0x80,0x80, 0x80,0x80,0x80,0x80,  0x80,0x80,0x80,0x80,  0x80,0x80,0x80,0x80,  0x80,0x00,0x00,
  31                                             0x00,0x00,0x0F,0x0F,0x0F, 0x0F,0x0F,0x0F,0x0F, 0x0F,0x0F,0x0F,0x0F, 0x0F,0x0F,0x0F,0x0F,
             - 0x0F,0x0F,0x0F,0x0F, 0x0F,0x0F,0x0F,0x0F,  0x0F,0x0F,0x0F,0x0F,  0x0F,0x0F,0x0F,0x0F,  0x0F,0x00,0x00};
C51 COMPILER V9.56.0.0   BIGFONT                                                           06/03/2021 14:52:33 PAGE 2   

  32            
  33          code unsigned char number_3[252]={0x00,0x00,0x00,0xC0, 0xE0,0xF0,0xF8,0xFC, 0xFC,0xFE,0xFE,0x7F,    0x3F,0x3
             -F,0x1F,0x1F,  0x1F,0x1F,0x1F,0x3F,  0x3F,0x7F,0x7E,0xFE,  0xFE,0xFC,0xFC,0xF8,  0xF0,0xE0,0xC0,0x00,  0x00,0x00,0x00,0x00,
  34                                             0x00,0x38,0x3F,0x3F, 0x3F,0x3F,0x3F,0x0F, 0x03,0x01,0x00,0x00,   0x00,0x00,0x00,0x00,  0x0
             -0,0x00,0x00,0x00, 0x00,0x00,0x00,0x00,  0x01,0x07,0xFF,0xFF,  0xFF,0xFF,0xFF,0xFF,  0xF8,0x00,0x00,0x00,
  35                                             0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00,   0x80,0x80,0x80,0x80,  0x8
             -0,0x80,0x80,0x80, 0xC0,0xC0,0xE0,0xF0,  0xF8,0xFC,0xFF,0xFF,  0xFF,0x7F,0x1F,0x07,  0x01,0x00,0x00,0x00,
  36                                             0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00,   0x1F,0x1F,0x1F,0x1F,  0x1
             -F,0x1F,0x1F,0x1F, 0x3F,0x3F,0x7F,0xFF,  0xFF,0xFF,0xFD,0xF8,  0xF0,0xE0,0xC0,0x00,  0x00,0x00,0x00,0x00,
  37                                             0xC0,0xC0,0xC0,0xC0, 0xC0,0xC0,0x00,0x00, 0x00,0x00,0x00,0x00,   0x00,0x00,0x00,0x00,  0x0
             -0,0x00,0x00,0x00, 0x00,0x00,0x00,0x00,  0x01,0x03,0xFF,0xFF,  0xFF,0xFF,0xFF,0xFF,  0xF8,0x00,0x00,0x00,
  38                                             0x07,0x1F,0x3F,0x7F, 0xFF,0xFF,0xFF,0xFC, 0xF8,0xF0,0xE0,0xE0,   0xC0,0xC0,0xC0,0x80,  0x8
             -0,0x80,0x80,0xC0, 0xC0,0xE0,0xE0,0xF0,  0xF8,0xFC,0xFF,0xFF,  0xFF,0x7F,0x3F,0x0F,  0x03,0x00,0x00,0x00,
  39                                             0x00,0x00,0x00,0x00, 0x00,0x01,0x03,0x03, 0x07,0x07,0x07,0x0F,   0x0F,0x0F,0x0F,0x0F,  0x0
             -F,0x0F,0x0F,0x0F, 0x0F,0x0F,0x07,0x07,  0x07,0x03,0x03,0x01,  0x00,0x00,0x00,0x00,  0x00,0x00,0x00,0x00};
  40            
  41          code unsigned char number_4[252]={0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00,    0x00,0x0
             -0,0x00,0x00,  0x80,0xC0,0xF0,0xF8,  0xFE,0xFF,0xFF,0x7F,  0xFF,0xFF,0xFF,0xFF,  0xFF,0xFF,0x00,0x00,  0x00,0x00,0x00,0x00,
  42                                             0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x80,   0xC0,0xF0,0xFC,0xFE,  0xF
             -F,0xFF,0x3F,0x1F, 0x07,0x03,0x00,0x00,  0xFF,0xFF,0xFF,0xFF,  0xFF,0xFF,0x00,0x00,  0x00,0x00,0x00,0x00,
  43                                             0x00,0x00,0x00,0x00, 0x00,0x00,0x80,0xE0, 0xF0,0xFC,0xFE,0xFF,   0xFF,0x3F,0x1F,0x07,  0x0
             -1,0x00,0x00,0x00, 0x00,0x00,0x00,0x00,  0xFF,0xFF,0xFF,0xFF,  0xFF,0xFF,0x00,0x00,  0x00,0x00,0x00,0x00,
  44                                             0x00,0x80,0xE0,0xF0, 0xFC,0xFE,0xFF,0xFF, 0x3F,0x1F,0x03,0x01,   0x00,0x00,0x00,0x00,  0x0
             -0,0x00,0x00,0x00, 0x00,0x00,0x00,0x00,  0xFF,0xFF,0xFF,0xFF,  0xFF,0xFF,0x00,0x00,  0x00,0x00,0x00,0x00,
  45                                             0xFE,0xFF,0xFF,0xFF, 0xFF,0xFF,0xFB,0xF8, 0xF8,0xF8,0xF8,0xF8,   0xF8,0xF8,0xF8,0xF8,  0xF
             -8,0xF8,0xF8,0xF8, 0xF8,0xF8,0xF8,0xF8,  0xFF,0xFF,0xFF,0xFF,  0xFF,0xFF,0xF8,0xF8,  0xF8,0xF8,0xF8,0xF8,
  46                                             0x01,0x01,0x01,0x01, 0x01,0x01,0x01,0x01, 0x01,0x01,0x01,0x01,   0x01,0x01,0x01,0x01,  0x0
             -1,0x01,0x01,0x01, 0x01,0x01,0x01,0x01,  0xFF,0xFF,0xFF,0xFF,  0xFF,0xFF,0x01,0x01,  0x01,0x01,0x01,0x01,
  47                                             0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00,   0x00,0x00,0x00,0x00,  0x0
             -0,0x00,0x00,0x00, 0x00,0x00,0x00,0x00,  0x0F,0x0F,0x0F,0x0F,  0x0F,0x0F,0x00,0x00,  0x00,0x00,0x00,0x00};
  48            
  49          code unsigned char number_5[252]={0x00,0x00,0x00,0xC0, 0xFF,0xFF,0xFF,0xFF, 0xFF,0x1F,0x1F,0x1F,    0x1F,0x1
             -F,0x1F,0x1F,  0x1F,0x1F,0x1F,0x1F,  0x1F,0x1F,0x1F,0x1F,  0x1F,0x1F,0x1F,0x1F,  0x1F,0x1F,0x1F,0x00,  0x00,0x00,0x00,0x00,
  50                                             0x00,0x00,0xE0,0xFF, 0xFF,0xFF,0xFF,0x1F, 0x01,0x00,0x00,0x00,   0x00,0x00,0x00,0x00,  0x0
             -0,0x00,0x00,0x00, 0x00,0x00,0x00,0x00,  0x00,0x00,0x00,0x00,  0x00,0x00,0x00,0x00,  0x00,0x00,0x00,0x00,
  51                                             0x80,0xFC,0xFF,0xFF, 0xFF,0xFF,0xE3,0xF0, 0xF8,0xF8,0x7C,0x7C,   0x3E,0x3E,0x3E,0x3E,  0x3
             -E,0x3E,0x3E,0x3E, 0x3E,0x7E,0x7E,0xFC,  0xFC,0xF8,0xF8,0xF8,  0xF0,0xE0,0xC0,0x80,  0x00,0x00,0x00,0x00,
  52                                             0x1F,0x1F,0x1F,0x1F, 0x1F,0x0F,0x07,0x03, 0x01,0x00,0x00,0x00,   0x00,0x00,0x00,0x00,  0x
             -00,0x00,0x00,0x00,  0x00,0x00,0x00,0x00,  0x00,0x01,0x03,0x0F,  0x3F,0xFF,0xFF,0xFF,  0xFF,0xFC,0xE0,0x00,
  53                                             0x80,0x80,0x80,0x80, 0x80,0x80,0x80,0x00, 0x00,0x00,0x00,0x00,   0x00,0x00,0x00,0x00,  0x0
             -0,0x00,0x00,0x00, 0x00,0x00,0x00,0x00,  0x00,0x00,0x00,0x00,  0x80,0xFF,0xFF,0xFF,  0xFF,0xFF,0xFF,0x00,
  54                                             0x01,0x07,0x1F,0x7F, 0xFF,0xFF,0xFF,0xFC, 0xF8,0xF0,0xE0,0xE0,   0xC0,0xC0,0x80,0x80,  0x8
             -0,0x80,0x80,0xC0, 0xC0,0xC0,0xE0,0xE0,  0xF0,0xF8,0xFC,0xFE,  0xFF,0x7F,0x3F,0x1F,  0x0F,0x03,0x00,0x00,
  55                                             0x00,0x00,0x00,0x00, 0x00,0x01,0x01,0x03, 0x03,0x07,0x07,0x07,   0x0F,0x0F,0x0F,0x0F,  0x0
             -F,0x0F,0x0F,0x0F, 0x0F,0x0F,0x07,0x07,  0x07,0x03,0x01,0x01,  0x00,0x00,0x00,0x00,  0x00,0x00,0x00,0x00};
  56            
  57          code unsigned char number_6[252]={0x00,0x00,0x00,0x00, 0xC0,0xE0,0xF0,0xF8, 0xFC,0xFE,0xFE,0x3E,    0x3F,0x3
             -F,0x1F,0x1F,  0x1F,0x0F,0x0F,0x0F,  0x0F,0x1F,0x1F,0x3F,  0x3E,0x3E,0x7E,0xFC,  0xFC,0xF8,0xF0,0xE0,  0xC0,0x00,0x00,0x00,
  58                                             0x00,0xE0,0xFC,0xFF, 0xFF,0xFF,0xFF,0x1F, 0x07,0x01,0x00,0x00,   0x00,0x00,0x00,0x00,  0
             -x00,0x00,0x00,0x00,  0x00,0x00,0x00,0x00,  0x00,0x00,0x00,0x01,  0x07,0x07,0x07,0x07,  0x07,0x07,0x00,0x00,
  59                                             0xFC,0xFF,0xFF,0xFF, 0xFF,0x03,0x80,0xC0, 0xE0,0xF0,0xF8,0xF8,   0xFC,0x7C,0x7C,0x7E,  0x
             -3E,0x3E,0x3E,0x3E,  0x7E,0x7E,0x7C,0xFC,  0xFC,0xF8,0xF8,0xF8,  0xF0,0xE0,0xC0,0x80,  0x00,0x00,0x00,0x00,
  60                                             0xFF,0xFF,0xFF,0xFF, 0xFF,0xFF,0xFF,0x1F, 0x07,0x03,0x01,0x00,   0x00,0x00,0x00,0x00,  0
             -x00,0x00,0x00,0x00,  0x00,0x00,0x00,0x00,  0x00,0x01,0x03,0x07,  0x1F,0x7F,0xFF,0xFF,  0xFF,0xFC,0xF0,0x00,
  61                                             0x07,0x7F,0xFF,0xFF, 0xFF,0xFF,0xE0,0x00, 0x00,0x00,0x00,0x00,   0x00,0x00,0x00,0x00,  0
             -x00,0x00,0x00,0x00,  0x00,0x00,0x00,0x00,  0x00,0x00,0x00,0x00,  0x00,0xE0,0xFF,0xFF,  0xFF,0xFF,0xFF,0x0F,
  62                                             0x00,0x00,0x03,0x0F, 0x3F,0x7F,0xFF,0xFF, 0xFC,0xF8,0xF0,0xE0,   0xE0,0xC0,0xC0,0x80,  0x8
             -0,0x80,0x80,0x80, 0x80,0xC0,0xC0,0xE0,  0xE0,0xF0,0xF8,0xFC,  0xFF,0xFF,0x7F,0x3F,  0x1F,0x07,0x00,0x00,
  63                                             0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x01, 0x03,0x03,0x07,0x07,   0x07,0x0F,0x0F,0x0F,  0x0
             -F,0x0F,0x0F,0x0F, 0x0F,0x0F,0x0F,0x07,  0x07,0x07,0x03,0x03,  0x01,0x00,0x00,0x00,  0x00,0x00,0x00,0x00};
  64            
  65          code unsigned char number_7[252]={0x3F,0x3F,0x3F,0x3F, 0x3F,0x3F,0x3F,0x3F, 0x3F,0x3F,0x3F,0x3F,    0x3F,0x3
C51 COMPILER V9.56.0.0   BIGFONT                                                           06/03/2021 14:52:33 PAGE 3   

             -F,0x3F,0x3F,  0x3F,0x3F,0x3F,0x3F,  0x3F,0x3F,0x3F,0x3F,  0x3F,0xFF,0xFF,0xFF,  0xFF,0xFF,0xFF,0x7F,  0x00,0x00,0x00,0x00,
  66                                             0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00,   0x00,0x00,0x00,0x00,  0x
             -00,0x00,0x00,0x00,  0x00,0x00,0xE0,0xF8,  0xFE,0xFF,0xFF,0x7F,  0x1F,0x07,0x01,0x00,  0x00,0x00,0x00,0x00,
  67                                             0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00,   0x00,0x00,0x00,0x00,  0x0
             -0,0x00,0xC0,0xF0, 0xFC,0xFF,0xFF,0xFF,  0x3F,0x0F,0x03,0x00,  0x00,0x00,0x00,0x00,  0x00,0x00,0x00,0x00,
  68                                             0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00,   0x00,0x00,0x80,0xE0,  0xF
             -C,0xFF,0xFF,0xFF, 0x7F,0x1F,0x03,0x00,  0x00,0x00,0x00,0x00,  0x00,0x00,0x00,0x00,  0x00,0x00,0x00,0x00,
  69                                             0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00, 0x00,0x00,0x80,0xE0,   0xF8,0xFE,0xFF,0xFF,  0x
             -7F,0x1F,0x07,0x01,  0x00,0x00,0x00,0x00,  0x00,0x00,0x00,0x00,  0x00,0x00,0x00,0x00,  0x00,0x00,0x00,0x00,
  70                                             0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0xC0, 0xF0,0xFC,0xFF,0xFF,   0xFF,0x3F,0x0F,0x03,  0x
             -00,0x00,0x00,0x00,  0x00,0x00,0x00,0x00,  0x00,0x00,0x00,0x00,  0x00,0x00,0x00,0x00,  0x00,0x00,0x00,0x00,
  71                                             0x00,0x00,0x00,0x00, 0x00,0x0C,0x0F,0x0F, 0x0F,0x0F,0x0F,0x03,   0x00,0x00,0x00,0x00,  0
             -x00,0x00,0x00,0x00,  0x00,0x00,0x00,0x00,  0x00,0x00,0x00,0x00,  0x00,0x00,0x00,0x00,  0x00,0x00,0x00,0x00};
  72            
  73          code unsigned char number_8[252]={0x00,0x00,0x00,0x00, 0xC0,0xE0,0xF0,0xF8, 0xF8,0xFC,0xFC,0xFE,    0x7E,0x7
             -F,0x3F,0x3F,  0x3F,0x3F,0x3F,0x3F,  0x3F,0x3F,0x7F,0x7E,  0xFE,0xFC,0xFC,0xF8,  0xF8,0xF0,0xE0,0xC0,  0x00,0x00,0x00,0x00,
  74                                             0x00,0x00,0xFC,0xFF, 0xFF,0xFF,0xFF,0xFF, 0xFF,0x03,0x01,0x00,   0x00,0x00,0x00,0x00,  0
             -x00,0x00,0x00,0x00,  0x00,0x00,0x00,0x00,  0x00,0x01,0x03,0xFF, 0xFF,0xFF,0xFF,0xFF,  0xFF,0xFC,0x00,0x00,
  75                                             0x00,0x00,0x03,0x0F, 0x3F,0x7F,0xFF,0xFF, 0xFF,0xFE,0xF8,0xF0,   0xE0,0xE0,0xC0,0xC0,  0x
             -C0,0xC0,0xC0,0xC0,  0xC0,0xC0,0xE0,0xE0,  0xF0,0xF8,0xFE,0xFF,  0xFF,0xFF,0x7F,0x3F,  0x0F,0x03,0x00,0x00,
  76                                             0x00,0x80,0xE0,0xF0, 0xF8,0xFC,0xFE,0xFF, 0xFF,0x7F,0x3F,0x1F,   0x0F,0x0F,0x07,0x07,  0x
             -07,0x07,0x07,0x07,  0x07,0x07,0x0F,0x0F,  0x1F,0x3F,0x7F,0xFF,  0xFF,0xFE,0xFC,0xF8,  0xF0,0xE0,0x80,0x00,
  77                                             0xFE,0xFF,0xFF,0xFF, 0xFF,0xFF,0xFF,0x03, 0x00,0x00,0x00,0x00,   0x00,0x00,0x00,0x00,  0x
             -00,0x00,0x00,0x00,  0x00,0x00, 0x00,0x00, 0x00,0x00,0x00,0x00,  0x03,0xFF,0xFF,0xFF,  0xFF,0xFF,0xFF,0xFE,
  78                                             0x01,0x07,0x1F,0x3F, 0x7F,0xFF,0xFF,0xFE, 0xF8,0xF0,0xE0,0xC0,   0xC0,0x80,0x80,0x80,  0x8
             -0,0x80,0x80,0x80,  0x80,0x80,0xC0,0xC0, 0xE0,0xE0,0xF0,0xF8,  0xFE,0xFF,0xFF,0x7F,  0x3F,0x1F,0x07,0x01,
  79                                             0x00,0x00,0x00,0x00, 0x00,0x00,0x01,0x01, 0x03,0x03,0x07,0x07,   0x07,0x0F,0x0F,0x0F,  0x0
             -F,0x0F,0x0F,0x0F, 0x0F,0x0F,0x0F,0x07,  0x07,0x07,0x03,0x03,  0x01,0x01,0x00,0x00,  0x00,0x00,0x00,0x00};
  80            
  81          code unsigned char number_9[252]={0x00,0x00,0x00,0x80, 0xC0,0xE0,0xF0,0xF8, 0xFC,0xFC,0xFE,0x7E,    0x7E,0x3
             -F,0x3F,0x1F,  0x1F,0x1F,0x1F,0x1F,  0x1F,0x3F,0x3F,0x7E,  0x7E,0xFE,0xFC,0xFC,  0xF8,0xF0,0xE0,0xC0,  0x00,0x00,0x00,0x00,
  82                                             0x00,0xF0,0xFE,0xFF, 0xFF,0xFF,0x7F,0x0F, 0x03,0x01,0x00,0x00,   0x00,0x00,0x00,0x00,  0x
             -00,0x00,0x00,0x00,  0x00,0x00,0x00,0x00,  0x00,0x00,0x01,0x03,  0x0F,0x7F,0xFF,0xFF,  0xFF,0xFC,0xE0,0x00,
  83                                             0x0F,0xFF,0xFF,0xFF, 0xFF,0xFF,0xE0,0x80, 0x00,0x00,0x00,0x00,   0x00,0x00,0x00,0x00,  0x0
             -0,0x00,0x00,0x00, 0x00,0x00,0x00,0x00,  0x00,0x00,0x00,0x00,  0x80,0xF0,0xFF,0xFF,  0xFF,0xFF,0xFF,0xFE,
  84                                             0x00,0x00,0x03,0x0F, 0x1F,0x3F,0x7F,0xFF, 0xFE,0xFC,0xF8,0xF0,   0xF0,0xE0,0xE0,0xE0,  0xC
             -0,0xC0,0xC0,0xC0, 0xE0,0xE0,0xE0,0xF0,  0xF0,0xF8,0xFC,0x7E,  0x3F,0x1F,0x0F,0xFF,  0xFF,0xFF,0xFF,0xFF,
  85                                             0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00, 0x01,0x01,0x01,0x03,   0x03,0x03,0x07,0x07,  0x0
             -7,0x07,0x07,0x07, 0x07,0x03,0x03,0x03,  0x01,0x01,0x00,0x00,  0x80,0xF0,0xFC,0xFF,  0xFF,0xFF,0x7F,0x03,
  86                                             0x00,0x00,0x0E,0x3E, 0x7E,0xFE,0xFE,0xFE, 0xF8,0xE0,0xC0,0xC0,   0xC0,0x80,0x80,0x00,  0x0
             -0,0x00,0x00,0x80, 0x80,0x80,0xC0,0xC0,  0xC0,0xE0,0xF8,0xFE,  0xFF,0xFF,0x7F,0x3F,  0x0F,0x03,0x00,0x00,
  87                                             0x00,0x00,0x00,0x00, 0x00,0x00,0x01,0x03, 0x03,0x07,0x07,0x07,   0x0F,0x0F,0x0F,0x0F,  0x0
             -F,0x0F,0x0F,0x0F,  0x0F,0x0F,0x0F,0x0F,  0x07,0x07,0x07,0x03, 0x01,0x00,0x00,0x00,  0x00,0x00,0x00,0x00};
  88          
  89          unsigned char drw_byte = 0x00;
  90          
  91          void draw_Dot(unsigned char col, unsigned char row, unsigned char brightless){
  92   1        Set_Column_Address(col, col);//0x1C start
  93   1        Set_Row_Address(row,row+3);
  94   1        writeRAMCommand();
  95   1        oled_Data(brightless);oled_Data(brightless);  
  96   1        oled_Data(brightless);oled_Data(brightless);
  97   1        oled_Data(brightless);oled_Data(brightless);
  98   1        oled_Data(brightless);oled_Data(brightless);  
  99   1      }
 100          
 101          void draw_Big_Number(unsigned char col, unsigned char row, const unsigned char* arr,unsigned char brightne
             -ss){
 102   1        
 103   1        Set_Column_Address(col, col);//0x1C start
 104   1        Set_Row_Address(row,row+0x38);
 105   1        writeRAMCommand();  
C51 COMPILER V9.56.0.0   BIGFONT                                                           06/03/2021 14:52:33 PAGE 4   

 106   1        for(j = 0; j < 252; j += 36){
 107   2          for(i = 0;i < 8;i++){
 108   3            drw_byte = 0x00;
 109   3            if(test_bit(arr[j+0], i) > 0)
 110   3              drw_byte+=(brightness << 4);
 111   3            if(test_bit(arr[j+1], i) > 0)
 112   3              drw_byte+=brightness;
 113   3            oled_Data(drw_byte);
 114   3          
 115   3            drw_byte = 0x00;
 116   3              if(test_bit(arr[j+2], i) > 0)
 117   3                drw_byte+=(brightness << 4);
 118   3              if(test_bit(arr[j+3], i) > 0)
 119   3                drw_byte+=brightness;
 120   3            oled_Data(drw_byte);    
 121   3          }
 122   2        }
 123   1        Set_Column_Address(col+1, col+1);//0x1C start
 124   1        Set_Row_Address(row,row+0x38);
 125   1        writeRAMCommand();
 126   1        for(j = 0; j < 252; j += 36){
 127   2          for(i = 0;i < 8;i++){
 128   3            drw_byte = 0x00;
 129   3            if(test_bit(arr[j+4], i) > 0)
 130   3              drw_byte+=(brightness << 4);
 131   3            if(test_bit(arr[j+5], i) > 0)
 132   3              drw_byte+=brightness;
 133   3            oled_Data(drw_byte);
 134   3          
 135   3            drw_byte = 0x00;
 136   3              if(test_bit(arr[j+6], i) > 0)
 137   3                drw_byte+=(brightness << 4);
 138   3              if(test_bit(arr[j+7], i) > 0)
 139   3                drw_byte+=brightness;
 140   3            oled_Data(drw_byte);    
 141   3          }
 142   2        }
 143   1        
 144   1        Set_Column_Address(col+2, col+2);//0x1C start
 145   1        Set_Row_Address(row,row+0x38);
 146   1        writeRAMCommand();
 147   1        for(j = 0; j < 252; j += 36){
 148   2          for(i = 0;i < 8;i++){
 149   3            drw_byte = 0x00;
 150   3            if(test_bit(arr[j+8], i) > 0)
 151   3              drw_byte+=(brightness << 4);
 152   3            if(test_bit(arr[j+9], i) > 0)
 153   3              drw_byte+=brightness;
 154   3            oled_Data(drw_byte);
 155   3          
 156   3            drw_byte = 0x00;
 157   3              if(test_bit(arr[j+10], i) > 0)
 158   3                drw_byte+=(brightness << 4);
 159   3              if(test_bit(arr[j+11], i) > 0)
 160   3                drw_byte+=brightness;
 161   3            oled_Data(drw_byte);    
 162   3          }
 163   2        }
 164   1        
 165   1        Set_Column_Address(col+3, col+3);//0x1C start
 166   1        Set_Row_Address(row,row+0x38);
 167   1        writeRAMCommand();
C51 COMPILER V9.56.0.0   BIGFONT                                                           06/03/2021 14:52:33 PAGE 5   

 168   1        for(j = 0; j < 252; j += 36){
 169   2          for(i = 0;i < 8;i++){
 170   3            drw_byte = 0x00;
 171   3            if(test_bit(arr[j+12], i) > 0)
 172   3              drw_byte+=(brightness << 4);
 173   3            if(test_bit(arr[j+13], i) > 0)
 174   3              drw_byte+=brightness;
 175   3            oled_Data(drw_byte);
 176   3          
 177   3            drw_byte = 0x00;
 178   3              if(test_bit(arr[j+14], i) > 0)
 179   3                drw_byte+=(brightness << 4);
 180   3              if(test_bit(arr[j+15], i) > 0)
 181   3                drw_byte+=brightness;
 182   3            oled_Data(drw_byte);    
 183   3          }
 184   2        }
 185   1        
 186   1        Set_Column_Address(col+4, col+4);//0x1C start
 187   1        Set_Row_Address(row,row+0x38);
 188   1        writeRAMCommand();
 189   1        for(j = 0; j < 252; j += 36){
 190   2          for(i = 0;i < 8;i++){
 191   3            drw_byte = 0x00;
 192   3            if(test_bit(arr[j+16], i) > 0)
 193   3              drw_byte+=(brightness << 4);
 194   3            if(test_bit(arr[j+17], i) > 0)
 195   3              drw_byte+=brightness;
 196   3            oled_Data(drw_byte);
 197   3          
 198   3            drw_byte = 0x00;
 199   3              if(test_bit(arr[j+18], i) > 0)
 200   3                drw_byte+=(brightness << 4);
 201   3              if(test_bit(arr[j+19], i) > 0)
 202   3                drw_byte+=brightness;
 203   3            oled_Data(drw_byte);    
 204   3          }
 205   2        }
 206   1        
 207   1        Set_Column_Address(col+5, col+5);//0x1C start
 208   1        Set_Row_Address(row,row+0x38);
 209   1        writeRAMCommand();
 210   1        for(j = 0; j < 252; j += 36){
 211   2          for(i = 0;i < 8;i++){
 212   3            drw_byte = 0x00;
 213   3            if(test_bit(arr[j+20], i) > 0)
 214   3              drw_byte+=(brightness << 4);
 215   3            if(test_bit(arr[j+21], i) > 0)
 216   3              drw_byte+=brightness;
 217   3            oled_Data(drw_byte);
 218   3          
 219   3            drw_byte = 0x00;
 220   3              if(test_bit(arr[j+22], i) > 0)
 221   3                drw_byte+=(brightness << 4);
 222   3              if(test_bit(arr[j+23], i) > 0)
 223   3                drw_byte+=brightness;
 224   3            oled_Data(drw_byte);    
 225   3          }
 226   2        } 
 227   1        
 228   1        Set_Column_Address(col+6, col+6);//0x1C start
 229   1        Set_Row_Address(row,row+0x38);
C51 COMPILER V9.56.0.0   BIGFONT                                                           06/03/2021 14:52:33 PAGE 6   

 230   1        writeRAMCommand();
 231   1        for(j = 0; j < 252; j += 36){
 232   2          for(i = 0;i < 8;i++){
 233   3            drw_byte = 0x00;
 234   3            if(test_bit(arr[j+24], i) > 0)
 235   3              drw_byte+=(brightness << 4);
 236   3            if(test_bit(arr[j+25], i) > 0)
 237   3              drw_byte+=brightness;
 238   3            oled_Data(drw_byte);
 239   3          
 240   3            drw_byte = 0x00;
 241   3              if(test_bit(arr[j+26], i) > 0)
 242   3                drw_byte+=(brightness << 4);
 243   3              if(test_bit(arr[j+27], i) > 0)
 244   3                drw_byte+=brightness;
 245   3            oled_Data(drw_byte);    
 246   3          }
 247   2        } 
 248   1        
 249   1        Set_Column_Address(col+7, col+7);//0x1C start
 250   1        Set_Row_Address(row,row+0x38);
 251   1        writeRAMCommand();
 252   1        for(j = 0; j < 252; j += 36){
 253   2          for(i = 0;i < 8;i++){
 254   3            drw_byte = 0x00;
 255   3            if(test_bit(arr[j+28], i) > 0)
 256   3              drw_byte+=(brightness << 4);
 257   3            if(test_bit(arr[j+29], i) > 0)
 258   3              drw_byte+=brightness;
 259   3            oled_Data(drw_byte);
 260   3          
 261   3            drw_byte = 0x00;
 262   3              if(test_bit(arr[j+30], i) > 0)
 263   3                drw_byte+=(brightness << 4);
 264   3              if(test_bit(arr[j+31], i) > 0)
 265   3                drw_byte+=brightness;
 266   3            oled_Data(drw_byte);    
 267   3          }
 268   2        } 
 269   1        
 270   1        Set_Column_Address(col+8, col+8);//0x1C start
 271   1        Set_Row_Address(row,row+0x38);
 272   1        writeRAMCommand();
 273   1        for(j = 0; j < 252; j += 36){
 274   2          for(i = 0;i < 8;i++){
 275   3            drw_byte = 0x00;
 276   3            if(test_bit(arr[j+32], i) > 0)
 277   3              drw_byte+=(brightness << 4);
 278   3            if(test_bit(arr[j+33], i) > 0)
 279   3              drw_byte+=brightness;
 280   3            oled_Data(drw_byte);
 281   3          
 282   3            drw_byte = 0x00;
 283   3              if(test_bit(arr[j+34], i) > 0)
 284   3                drw_byte+=(brightness << 4);
 285   3              if(test_bit(arr[j+35], i) > 0)
 286   3                drw_byte+=brightness;
 287   3            oled_Data(drw_byte);    
 288   3          }
 289   2        }
 290   1      }
 291          
C51 COMPILER V9.56.0.0   BIGFONT                                                           06/03/2021 14:52:33 PAGE 7   

 292          void setBrightnessBigNumber(unsigned char b){
 293   1        brightness = b;
 294   1      }
 295          
 296          void clearBigFontSquare(unsigned char col, unsigned char row, unsigned char brightless){
 297   1        Set_Column_Address(col, col+29);//0x1C start
 298   1        Set_Row_Address(row,row+63);
 299   1        writeRAMCommand();
 300   1        for(j = 0; j < 30; j++){
 301   2          for(i = 0; i < 64; i++){
 302   3            oled_Data(brightless);oled_Data(brightless);  
 303   3          }
 304   2        }
 305   1      }
 306          
 307          
 308          void showBigNumber(unsigned long int n){
 309   1        
 310   1        first = n/100;
 311   1        second = (n%100)/10;
 312   1        third  = n%10;
 313   1        //draw_Dot(0x2F,0x35, 0x00);
 314   1        
 315   1        switch(INDEX_MENU){
 316   2          case 10://ENERGY
 317   2              if(n < 1000){       
 318   3                first = n/100;
 319   3                second = (n%100)/10;
 320   3                third  = n%10;    
 321   3                draw_Dot(0x2F,0x35, 0xFF);
 322   3              }
 323   2              break;
 324   2          case 11://ENERGY
 325   2              if(n < 1000){       
 326   3                first = n/100;
 327   3                second = (n%100)/10;
 328   3                third  = n%10;    
 329   3                draw_Dot(0x2F,0x35, 0xFF);
 330   3              }
 331   2              break;
 332   2          case 12://RADIATION1
 333   2              first = n/100;
 334   2              second = (n%100)/10;
 335   2              third  = n%10;
 336   2              draw_Dot(0x2F,0x35, 0x00);
 337   2              break;
 338   2          case 13://RADIATION2
 339   2              first = n/100;
 340   2              second = (n%100)/10;
 341   2              third  = n%10;
 342   2              draw_Dot(0x2F,0x35, 0x00);
 343   2              break;
 344   2          case 20://LAMP FREQUENCY
 345   2              first = n/100;
 346   2              second = (n%100)/10;
 347   2              third  = n%10;
 348   2              draw_Dot(0x2F,0x35, 0x00);
 349   2              break;
 350   2          case 21://LAMP FREQUENCY
 351   2              first = n/100;
 352   2              second = (n%100)/10;
 353   2              third  = n%10;
C51 COMPILER V9.56.0.0   BIGFONT                                                           06/03/2021 14:52:33 PAGE 8   

 354   2              draw_Dot(0x2F,0x35, 0x00);
 355   2              break;
 356   2          case 22://OUTPUT prr
 357   2              if(n < 10){
 358   3                first = 0;
 359   3                second = 0;
 360   3                third  = n%10;
 361   3                draw_Dot(0x2F,0x35, 0xFF);
 362   3              }else if(n < 100){
 363   3                first = 0;
 364   3                second = n/100;
 365   3                third  = n/10;
 366   3                draw_Dot(0x2F,0x35, 0x00);  
 367   3              }else if(n < 1000){
 368   3                first = 0;
 369   3                second = n/100;
 370   3                third  = (n%100)/10;
 371   3                draw_Dot(0x2F,0x35, 0x00);  
 372   3              }               
 373   2              break;
 374   2          case 23:draw_Dot(0x2F,0x35, 0x00);
 375   2              break;        
 376   2          case 24://DELAY1
 377   2              n = n/1000;
 378   2              first = n/100;
 379   2              second = (n%100)/10;
 380   2              third  = n%10;
 381   2              break;
 382   2          case 25://DELAY2
 383   2              n = n/1000;
 384   2              first = n/100;
 385   2              second = (n%100)/10;
 386   2              third  = n%10;
 387   2              break;
 388   2          case 43:
 389   2             if(n < 1000){        
 390   3                first = n/100;
 391   3                second = (n%100)/10;
 392   3                third  = n%10;    
 393   3                draw_Dot(0x2F,0x35, 0xFF);
 394   3              }
 395   2             break;
 396   2          case 44:
 397   2             if(n < 1000){        
 398   3                first = n/100;
 399   3                second = (n%100)/10;
 400   3                third  = n%10;    
 401   3                draw_Dot(0x2F,0x35, 0x00);
 402   3              }
 403   2             break;
 404   2          case 50:
 405   2             if(n < 1000){        
 406   3                first = n/100;
 407   3                second = (n%100)/10;
 408   3                third  = n%10;    
 409   3                draw_Dot(0x25,0x35, 0xFF);
 410   3              }
 411   2             break;
 412   2          case 51:
 413   2             if(n < 1000){        
 414   3                first = n/100;
 415   3                second = (n%100)/10;
C51 COMPILER V9.56.0.0   BIGFONT                                                           06/03/2021 14:52:33 PAGE 9   

 416   3                third  = n%10;    
 417   3                draw_Dot(0x25,0x35, 0x00);
 418   3              }
 419   2             break; 
 420   2          default:break;
 421   2        }
 422   1        
 423   1        switch(first){
 424   2          case 0:draw_Big_Number(0x1C,0x06,number_0, brightness);break;
 425   2          case 1:draw_Big_Number(0x1C,0x06,number_1, brightness);break;
 426   2          case 2:draw_Big_Number(0x1C,0x06,number_2, brightness);break;
 427   2          case 3:draw_Big_Number(0x1C,0x06,number_3, brightness);break;
 428   2          case 4:draw_Big_Number(0x1C,0x06,number_4, brightness);break;
 429   2          case 5:draw_Big_Number(0x1C,0x06,number_5, brightness);break;
 430   2          case 6:draw_Big_Number(0x1C,0x06,number_6, brightness);break;
 431   2          case 7:draw_Big_Number(0x1C,0x06,number_7, brightness);break;
 432   2          case 8:draw_Big_Number(0x1C,0x06,number_8, brightness);break;
 433   2          case 9:draw_Big_Number(0x1C,0x06,number_9, brightness);break;
 434   2          default: break;   
 435   2        }
 436   1        switch(second){
 437   2          case 0:draw_Big_Number(0x26,0x06,number_0, brightness);break;
 438   2          case 1:draw_Big_Number(0x26,0x06,number_1, brightness);break;
 439   2          case 2:draw_Big_Number(0x26,0x06,number_2, brightness);break;
 440   2          case 3:draw_Big_Number(0x26,0x06,number_3, brightness);break;
 441   2          case 4:draw_Big_Number(0x26,0x06,number_4, brightness);break;
 442   2          case 5:draw_Big_Number(0x26,0x06,number_5, brightness);break;
 443   2          case 6:draw_Big_Number(0x26,0x06,number_6, brightness);break;
 444   2          case 7:draw_Big_Number(0x26,0x06,number_7, brightness);break;
 445   2          case 8:draw_Big_Number(0x26,0x06,number_8, brightness);break;
 446   2          case 9:draw_Big_Number(0x26,0x06,number_9, brightness);break;
 447   2          default: break;   
 448   2        }
 449   1        switch(third){
 450   2          case 0:draw_Big_Number(0x30,0x06,number_0, brightness);break;
 451   2          case 1:draw_Big_Number(0x30,0x06,number_1, brightness);break;
 452   2          case 2:draw_Big_Number(0x30,0x06,number_2, brightness);break;
 453   2          case 3:draw_Big_Number(0x30,0x06,number_3, brightness);break;
 454   2          case 4:draw_Big_Number(0x30,0x06,number_4, brightness);break;
 455   2          case 5:draw_Big_Number(0x30,0x06,number_5, brightness);break;
 456   2          case 6:draw_Big_Number(0x30,0x06,number_6, brightness);break;
 457   2          case 7:draw_Big_Number(0x30,0x06,number_7, brightness);break;
 458   2          case 8:draw_Big_Number(0x30,0x06,number_8, brightness);break;
 459   2          case 9:draw_Big_Number(0x30,0x06,number_9, brightness);break;
 460   2          default: break;   
 461   2        } 
 462   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   4139    ----
   CONSTANT SIZE    =   2520    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     12      14
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
