C51 COMPILER V9.56.0.0   MIDDLEFONT                                                        06/03/2021 14:52:33 PAGE 1   


C51 COMPILER V9.56.0.0, COMPILATION OF MODULE MIDDLEFONT
OBJECT MODULE PLACED IN .\Objects\MiddleFont.obj
COMPILER INVOKED BY: C:\Program Files\Keil\C51\BIN\C51.EXE MiddleFont.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRIN
                    -T(.\Listings\MiddleFont.lst) TABS(2) OBJECT(.\Objects\MiddleFont.obj)

line level    source

   1          #include <Display.h>
   2          #include <FontDisplay.h>
   3          #include <Menu.h>
   4          unsigned int p = 0;
   5          unsigned char temp_byte = 0x00;
   6          code const unsigned char zero_Arial_20x32[] = {
   7                  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF0, 0x7F, 0x00, 0x00, 0xFF, 0xFF, 0x07, 0x
             -80, 0xFF, 0xFF, 0x1F, 0xC0, 0x0F, 0x00, 0x3F, 0xE0, 0x01, 0x00, 0x3C, 0xF0, 0x00, 0x00, 0x78, 0x70, 0x00, 0x00, 0x70, 0x
             -70, 0x00, 0x00, 0x70, 0x70, 0x00, 0x00, 0x70, 0x70, 0x00, 0x00, 0x70, 0x70, 0x00, 0x00, 0x70, 0xF0, 0x00, 0x00, 0x78, 0x
             -E0, 0x01, 0x00, 0x3C, 0xE0, 0x0F, 0x00, 0x1F, 0xC0, 0xFF, 0xFF, 0x0F, 0x00, 0xFF, 0xFF, 0x07, 0x00, 0xF0, 0x7F, 0x00, 0x
             -00, 0x00, 0x00, 0x00   // Code for char 0
   8                  };  
   9          code const unsigned char one_Arial_20x32[] = {
  10            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x
             -38, 0x00, 0x00, 0x00, 0x1C, 0x00, 0x00, 0x00, 0x1E, 0x00, 0x00, 0x00, 0x0E, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x80, 0x
             -07, 0x00, 0x00, 0xC0, 0x03, 0x00, 0x00, 0xE0, 0xFF, 0xFF, 0x7F, 0xF0, 0xFF, 0xFF, 0x7F, 0xF0, 0xFF, 0xFF, 0x7F, 0x00, 0x
             -00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x
             -00, 0x00, 0x00   // Code for char 1
  11                  };
  12          code const unsigned char two_Arial_20x32[] = {
  13            0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x60, 0x80, 0x07, 0x00, 0x78, 0xC0, 0x07, 0x00, 0x7C, 0xE0, 0x0
             -1, 0x00, 0x7E, 0xE0, 0x00, 0x00, 0x77, 0xF0, 0x00, 0x80, 0x77, 0x70, 0x00, 0xC0, 0x73, 0x70, 0x00, 0xC0, 0x71, 0x70, 0x0
             -0, 0xE0, 0x70, 0x70, 0x00, 0x70, 0x70, 0x70, 0x00, 0x78, 0x70, 0x70, 0x00, 0x3C, 0x70, 0xF0, 0x00, 0x1E, 0x70, 0xE0, 0x0
             -0, 0x0F, 0x70, 0xE0, 0xC3, 0x07, 0x70, 0xC0, 0xFF, 0x03, 0x70, 0x80, 0xFF, 0x00, 0x70, 0x00, 0x3E, 0x00, 0x70, 0x00, 0x0
             -0, 0x00, 0x00   // Code for char 2
  14                  };
  15          code const unsigned char three_Arial_20x32[] = {
  16            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x03, 0x80, 0x07, 0x00, 0x0F, 0xC0, 0x0
             -7, 0x00, 0x1F, 0xE0, 0x03, 0x00, 0x3E, 0xE0, 0x00, 0x00, 0x38, 0xF0, 0x00, 0x00, 0x70, 0x70, 0x00, 0x03, 0x70, 0x70, 0x8
             -0, 0x03, 0x70, 0x70, 0x80, 0x03, 0x70, 0x70, 0x80, 0x03, 0x70, 0x70, 0xC0, 0x03, 0x70, 0xE0, 0xC0, 0x03, 0x38, 0xE0, 0xE
             -1, 0x07, 0x38, 0xC0, 0x7F, 0x0F, 0x1E, 0x80, 0x7F, 0xFE, 0x1F, 0x00, 0x1F, 0xFC, 0x07, 0x00, 0x00, 0xF0, 0x03, 0x00, 0x0
             -0, 0x00, 0x00   // Code for char 3
  17                  };
  18          code const unsigned char four_Arial_20x32[] = {
  19            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE0, 0x01, 0x00, 0x00, 0xF0, 0x01, 0x00, 0x00, 0xFC, 0x01, 0x00, 0x0
             -0, 0xFE, 0x01, 0x00, 0x80, 0xCF, 0x01, 0x00, 0xC0, 0xC7, 0x01, 0x00, 0xF0, 0xC1, 0x01, 0x00, 0xF8, 0xC0, 0x01, 0x00, 0x3
             -E, 0xC0, 0x01, 0x00, 0x1F, 0xC0, 0x01, 0xC0, 0x07, 0xC0, 0x01, 0xE0, 0x03, 0xC0, 0x01, 0xF0, 0xFF, 0xFF, 0x7F, 0xF0, 0xF
             -F, 0xFF, 0x7F, 0xF0, 0xFF, 0xFF, 0x7F, 0x00, 0x00, 0xC0, 0x01, 0x00, 0x00, 0xC0, 0x01, 0x00, 0x00, 0xC0, 0x01, 0x00, 0x0
             -0, 0x00, 0x00   // Code for char 4
  20                  };
  21          code const unsigned char five_Arial_20x32[] = {
  22            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x03, 0x00, 0xF8, 0x03, 0x0F, 0xC0, 0xF
             -F, 0x03, 0x1F, 0xF0, 0xFF, 0x01, 0x3C, 0xF0, 0xC7, 0x01, 0x38, 0x70, 0xC0, 0x00, 0x70, 0x70, 0xE0, 0x00, 0x70, 0x70, 0xE
             -0, 0x00, 0x70, 0x70, 0xE0, 0x00, 0x70, 0x70, 0xE0, 0x00, 0x70, 0x70, 0xE0, 0x00, 0x70, 0x70, 0xE0, 0x01, 0x38, 0x70, 0xC
             -0, 0x01, 0x38, 0x70, 0xC0, 0x07, 0x1E, 0x70, 0x80, 0xFF, 0x0F, 0x70, 0x00, 0xFF, 0x07, 0x00, 0x00, 0xFC, 0x01, 0x00, 0x0
             -0, 0x00, 0x00   // Code for char 5
  23                  };
  24          code const unsigned char six_Arial_20x32[] = {
  25            0x00, 0x00, 0x00, 0x00, 0x00, 0xE0, 0x7F, 0x00, 0x00, 0xFE, 0xFF, 0x03, 0x00, 0xFF, 0xFF, 0x0F, 0xC0, 0x0
             -F, 0x07, 0x1F, 0xC0, 0x83, 0x03, 0x3C, 0xE0, 0xC1, 0x01, 0x38, 0xE0, 0xC0, 0x00, 0x70, 0x70, 0xE0, 0x00, 0x70, 0x70, 0xE
             -0, 0x00, 0x70, 0x70, 0xE0, 0x00, 0x70, 0x70, 0xE0, 0x00, 0x70, 0x70, 0xE0, 0x00, 0x70, 0xF0, 0xE0, 0x01, 0x38, 0xE0, 0xC
             -0, 0x01, 0x3C, 0xE0, 0xC3, 0x07, 0x1E, 0xC0, 0x87, 0xFF, 0x0F, 0x80, 0x07, 0xFE, 0x07, 0x00, 0x06, 0xF8, 0x01, 0x00, 0x0
             -0, 0x00, 0x00   // Code for char 6
  26                  };
C51 COMPILER V9.56.0.0   MIDDLEFONT                                                        06/03/2021 14:52:33 PAGE 2   

  27          code const unsigned char seven_Arial_20x32[] = {
  28            0x00, 0x00, 0x00, 0x00, 0x70, 0x00, 0x00, 0x00, 0x70, 0x00, 0x00, 0x00, 0x70, 0x00, 0x00, 0x00, 0x70, 0x0
             -0, 0x00, 0x00, 0x70, 0x00, 0x00, 0x78, 0x70, 0x00, 0x80, 0x7F, 0x70, 0x00, 0xF0, 0x7F, 0x70, 0x00, 0xFC, 0x07, 0x70, 0x0
             -0, 0x7F, 0x00, 0x70, 0xC0, 0x0F, 0x00, 0x70, 0xE0, 0x03, 0x00, 0x70, 0xF8, 0x00, 0x00, 0x70, 0x3C, 0x00, 0x00, 0x70, 0x0
             -E, 0x00, 0x00, 0x70, 0x07, 0x00, 0x00, 0xF0, 0x01, 0x00, 0x00, 0xF0, 0x00, 0x00, 0x00, 0x70, 0x00, 0x00, 0x00, 0x00, 0x0
             -0, 0x00, 0x00   // Code for char 7
  29                  };
  30          code const unsigned char eight_Arial_20x32[] = {
  31            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF0, 0x03, 0x00, 0x3F, 0xFC, 0x0F, 0x80, 0x
             -7F, 0xFE, 0x1F, 0xC0, 0xFF, 0x1E, 0x3C, 0xE0, 0xE1, 0x07, 0x38, 0xF0, 0xC0, 0x07, 0x78, 0x70, 0x80, 0x03, 0x70, 0x70, 0x
             -80, 0x03, 0x70, 0x70, 0x80, 0x03, 0x70, 0x70, 0x80, 0x03, 0x70, 0x70, 0x80, 0x03, 0x70, 0xE0, 0xC0, 0x07, 0x78, 0xE0, 0x
             -E1, 0x07, 0x38, 0xC0, 0xFF, 0x1E, 0x3E, 0x80, 0x7F, 0xFC, 0x1F, 0x00, 0x3F, 0xFC, 0x0F, 0x00, 0x00, 0xF0, 0x03, 0x00, 0x
             -00, 0x00, 0x00   // Code for char 8
  32                  };
  33          code const unsigned char nine_Arial_20x32[] = {                               
  34            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFC, 0x01, 0x03, 0x00, 0xFF, 0x07, 0x0F, 0xC0, 0x
             -FF, 0x0F, 0x1F, 0xE0, 0x03, 0x1F, 0x3C, 0xE0, 0x01, 0x1C, 0x38, 0xF0, 0x00, 0x3C, 0x70, 0x70, 0x00, 0x38, 0x70, 0x70, 0x
             -00, 0x38, 0x70, 0x70, 0x00, 0x38, 0x70, 0x70, 0x00, 0x38, 0x70, 0x70, 0x00, 0x18, 0x78, 0xE0, 0x00, 0x1C, 0x38, 0xE0, 0x
             -00, 0x0E, 0x1C, 0xC0, 0x03, 0x87, 0x1F, 0x80, 0xFF, 0xFF, 0x0F, 0x00, 0xFF, 0xFF, 0x03, 0x00, 0xF8, 0x7F, 0x00, 0x00, 0x
             -00, 0x00, 0x00   // Code for char 9
  35                  };
  36          code const unsigned char escape_Arial_20x32[80]={0};
  37                  /*
  38                  0 4  8 12  16 20 24 28  32 36 40 44  48 52 56 60  64 68 72 76
  39                  1 5  9 13  17 21 25 29  33 37 41 45  49 53 57 61  65 69 73 77
  40                  2 6 10 14  18 22 26 30  34 38 42 46  50 54 58 62  66 70 74 78
  41                  3 7 11 15  19 23 27 31  35 39 43 47  51 55 59 63  67 71 75 79
  42                 */
  43          void drawChar_20x32_toDisplay_Array(const unsigned char* arr20x32, unsigned char col, unsigned char row, u
             -nsigned char brightness){
  44   1        Set_Column_Address(col, col+4);
  45   1        Set_Row_Address(row,row+31);
  46   1        writeRAMCommand();
  47   1        for(p = 0; p < 8;p++){//0 4 8 12
  48   2            temp_byte = 0x00;
  49   2            if(test_bit(arr20x32[0], p) > 0)
  50   2              temp_byte+=(brightness << 4);
  51   2            if(test_bit(arr20x32[4], p) > 0)
  52   2              temp_byte+=brightness;
  53   2            oled_Data(temp_byte);   
  54   2            temp_byte = 0x00;
  55   2            if(test_bit(arr20x32[8], p) > 0)
  56   2              temp_byte+=(brightness << 4);
  57   2            if(test_bit(arr20x32[12], p) > 0)
  58   2              temp_byte+=brightness;
  59   2            oled_Data(temp_byte);   
  60   2        }
  61   1        for(p = 0; p < 8;p++){//1 5 9 13
  62   2            temp_byte = 0x00;
  63   2            if(test_bit(arr20x32[1], p) > 0)
  64   2              temp_byte+=(brightness << 4);
  65   2            if(test_bit(arr20x32[5], p) > 0)
  66   2              temp_byte+=brightness;
  67   2            oled_Data(temp_byte);
  68   2            
  69   2            temp_byte = 0x00;
  70   2            if(test_bit(arr20x32[9], p) > 0)
  71   2              temp_byte+=(brightness << 4);
  72   2            if(test_bit(arr20x32[13], p) > 0)
  73   2              temp_byte+=brightness;
  74   2            oled_Data(temp_byte);   
  75   2        }
C51 COMPILER V9.56.0.0   MIDDLEFONT                                                        06/03/2021 14:52:33 PAGE 3   

  76   1        for(p = 0; p < 8;p++){//2 6 10 14
  77   2            temp_byte = 0x00;
  78   2            if(test_bit(arr20x32[2], p) > 0)
  79   2              temp_byte+=(brightness << 4);
  80   2            if(test_bit(arr20x32[6], p) > 0)
  81   2              temp_byte+=brightness;
  82   2            oled_Data(temp_byte);
  83   2            
  84   2            temp_byte = 0x00;
  85   2            if(test_bit(arr20x32[10], p) > 0)
  86   2              temp_byte+=(brightness << 4);
  87   2            if(test_bit(arr20x32[14], p) > 0)
  88   2              temp_byte+=brightness;
  89   2            oled_Data(temp_byte);   
  90   2        }
  91   1        for(p = 0; p < 8;p++){//3 7 11 15
  92   2            temp_byte = 0x00;
  93   2            if(test_bit(arr20x32[3], p) > 0)
  94   2              temp_byte+=(brightness << 4);
  95   2            if(test_bit(arr20x32[7], p) > 0)
  96   2              temp_byte+=brightness;
  97   2            oled_Data(temp_byte);
  98   2            
  99   2            temp_byte = 0x00;
 100   2            if(test_bit(arr20x32[11], p) > 0)
 101   2              temp_byte+=(brightness << 4);
 102   2            if(test_bit(arr20x32[15], p) > 0)
 103   2              temp_byte+=brightness;
 104   2            oled_Data(temp_byte);   
 105   2        }
 106   1        for(p = 0; p < 8;p++){//16 20 24 28
 107   2            temp_byte = 0x00;
 108   2            if(test_bit(arr20x32[16], p) > 0)
 109   2              temp_byte+=(brightness << 4);
 110   2            if(test_bit(arr20x32[20], p) > 0)
 111   2              temp_byte+=brightness;
 112   2            oled_Data(temp_byte);
 113   2            
 114   2            temp_byte = 0x00;
 115   2            if(test_bit(arr20x32[24], p) > 0)
 116   2              temp_byte+=(brightness << 4);
 117   2            if(test_bit(arr20x32[28], p) > 0)
 118   2              temp_byte+=brightness;
 119   2            oled_Data(temp_byte);   
 120   2        }
 121   1        for(p = 0; p < 8;p++){//17 21 25 29
 122   2            temp_byte = 0x00;
 123   2            if(test_bit(arr20x32[17], p) > 0)
 124   2              temp_byte+=(brightness << 4);
 125   2            if(test_bit(arr20x32[21], p) > 0)
 126   2              temp_byte+=brightness;
 127   2            oled_Data(temp_byte);
 128   2            
 129   2            temp_byte = 0x00;
 130   2            if(test_bit(arr20x32[25], p) > 0)
 131   2              temp_byte+=(brightness << 4);
 132   2            if(test_bit(arr20x32[29], p) > 0)
 133   2              temp_byte+=brightness;
 134   2            oled_Data(temp_byte);   
 135   2        }
 136   1        for(p = 0; p < 8;p++){//18 22 26 30
 137   2            temp_byte = 0x00;
C51 COMPILER V9.56.0.0   MIDDLEFONT                                                        06/03/2021 14:52:33 PAGE 4   

 138   2            if(test_bit(arr20x32[18], p) > 0)
 139   2              temp_byte+=(brightness << 4);
 140   2            if(test_bit(arr20x32[22], p) > 0)
 141   2              temp_byte+=brightness;
 142   2            oled_Data(temp_byte);
 143   2            
 144   2            temp_byte = 0x00;
 145   2            if(test_bit(arr20x32[26], p) > 0)
 146   2              temp_byte+=(brightness << 4);
 147   2            if(test_bit(arr20x32[30], p) > 0)
 148   2              temp_byte+=brightness;
 149   2            oled_Data(temp_byte);   
 150   2        }
 151   1        for(p = 0; p < 8;p++){//19 23 27 31
 152   2            temp_byte = 0x00;
 153   2            if(test_bit(arr20x32[19], p) > 0)
 154   2              temp_byte+=(brightness << 4);
 155   2            if(test_bit(arr20x32[23], p) > 0)
 156   2              temp_byte+=brightness;
 157   2            oled_Data(temp_byte);
 158   2            
 159   2            temp_byte = 0x00;
 160   2            if(test_bit(arr20x32[27], p) > 0)
 161   2              temp_byte+=(brightness << 4);
 162   2            if(test_bit(arr20x32[31], p) > 0)
 163   2              temp_byte+=brightness;
 164   2            oled_Data(temp_byte);   
 165   2        }
 166   1        for(p = 0; p < 8;p++){//32 36 40 44
 167   2            temp_byte = 0x00;
 168   2            if(test_bit(arr20x32[32], p) > 0)
 169   2              temp_byte+=(brightness << 4);
 170   2            if(test_bit(arr20x32[36], p) > 0)
 171   2              temp_byte+=brightness;
 172   2            oled_Data(temp_byte);
 173   2            
 174   2            temp_byte = 0x00;
 175   2            if(test_bit(arr20x32[40], p) > 0)
 176   2              temp_byte+=(brightness << 4);
 177   2            if(test_bit(arr20x32[44], p) > 0)
 178   2              temp_byte+=brightness;
 179   2            oled_Data(temp_byte);   
 180   2        }
 181   1        for(p = 0; p < 8;p++){//33 37 41 45
 182   2            temp_byte = 0x00;
 183   2            if(test_bit(arr20x32[33], p) > 0)
 184   2              temp_byte+=(brightness << 4);
 185   2            if(test_bit(arr20x32[37], p) > 0)
 186   2              temp_byte+=brightness;
 187   2            oled_Data(temp_byte);
 188   2            
 189   2            temp_byte = 0x00;
 190   2            if(test_bit(arr20x32[41], p) > 0)
 191   2              temp_byte+=(brightness << 4);
 192   2            if(test_bit(arr20x32[45], p) > 0)
 193   2              temp_byte+=brightness;
 194   2            oled_Data(temp_byte);   
 195   2        }
 196   1        for(p = 0; p < 8;p++){//34 38 42 46
 197   2            temp_byte = 0x00;
 198   2            if(test_bit(arr20x32[34], p) > 0)
 199   2              temp_byte+=(brightness << 4);
C51 COMPILER V9.56.0.0   MIDDLEFONT                                                        06/03/2021 14:52:33 PAGE 5   

 200   2            if(test_bit(arr20x32[38], p) > 0)
 201   2              temp_byte+=brightness;
 202   2            oled_Data(temp_byte);
 203   2            
 204   2            temp_byte = 0x00;
 205   2            if(test_bit(arr20x32[42], p) > 0)
 206   2              temp_byte+=(brightness << 4);
 207   2            if(test_bit(arr20x32[46], p) > 0)
 208   2              temp_byte+=brightness;
 209   2            oled_Data(temp_byte);   
 210   2        }
 211   1        for(p = 0; p < 8;p++){//35 39 43 47
 212   2            temp_byte = 0x00;
 213   2            if(test_bit(arr20x32[35], p) > 0)
 214   2              temp_byte+=(brightness << 4);
 215   2            if(test_bit(arr20x32[39], p) > 0)
 216   2              temp_byte+=brightness;
 217   2            oled_Data(temp_byte);
 218   2            
 219   2            temp_byte = 0x00;
 220   2            if(test_bit(arr20x32[43], p) > 0)
 221   2              temp_byte+=(brightness << 4);
 222   2            if(test_bit(arr20x32[47], p) > 0)
 223   2              temp_byte+=brightness;
 224   2            oled_Data(temp_byte);   
 225   2        }
 226   1        for(p = 0; p < 8;p++){//48 52 56 60
 227   2            temp_byte = 0x00;
 228   2            if(test_bit(arr20x32[48], p) > 0)
 229   2              temp_byte+=(brightness << 4);
 230   2            if(test_bit(arr20x32[52], p) > 0)
 231   2              temp_byte+=brightness;
 232   2            oled_Data(temp_byte);
 233   2            
 234   2            temp_byte = 0x00;
 235   2            if(test_bit(arr20x32[56], p) > 0)
 236   2              temp_byte+=(brightness << 4);
 237   2            if(test_bit(arr20x32[60], p) > 0)
 238   2              temp_byte+=brightness;
 239   2            oled_Data(temp_byte);   
 240   2        }
 241   1        for(p = 0; p < 8;p++){//49 53 57 61
 242   2            temp_byte = 0x00;
 243   2            if(test_bit(arr20x32[49], p) > 0)
 244   2              temp_byte+=(brightness << 4);
 245   2            if(test_bit(arr20x32[53], p) > 0)
 246   2              temp_byte+=brightness;
 247   2            oled_Data(temp_byte);
 248   2            
 249   2            temp_byte = 0x00;
 250   2            if(test_bit(arr20x32[57], p) > 0)
 251   2              temp_byte+=(brightness << 4);
 252   2            if(test_bit(arr20x32[61], p) > 0)
 253   2              temp_byte+=brightness;
 254   2            oled_Data(temp_byte);   
 255   2        }
 256   1        for(p = 0; p < 8;p++){//50 54 58 62
 257   2            temp_byte = 0x00;
 258   2            if(test_bit(arr20x32[50], p) > 0)
 259   2              temp_byte+=(brightness << 4);
 260   2            if(test_bit(arr20x32[54], p) > 0)
 261   2              temp_byte+=brightness;
C51 COMPILER V9.56.0.0   MIDDLEFONT                                                        06/03/2021 14:52:33 PAGE 6   

 262   2            oled_Data(temp_byte);
 263   2            
 264   2            temp_byte = 0x00;
 265   2            if(test_bit(arr20x32[58], p) > 0)
 266   2              temp_byte+=(brightness << 4);
 267   2            if(test_bit(arr20x32[62], p) > 0)
 268   2              temp_byte+=brightness;
 269   2            oled_Data(temp_byte);   
 270   2        }
 271   1        for(p = 0; p < 8;p++){//51 55 59 63
 272   2            temp_byte = 0x00;
 273   2            if(test_bit(arr20x32[51], p) > 0)
 274   2              temp_byte+=(brightness << 4);
 275   2            if(test_bit(arr20x32[55], p) > 0)
 276   2              temp_byte+=brightness;
 277   2            oled_Data(temp_byte);
 278   2            
 279   2            temp_byte = 0x00;
 280   2            if(test_bit(arr20x32[59], p) > 0)
 281   2              temp_byte+=(brightness << 4);
 282   2            if(test_bit(arr20x32[63], p) > 0)
 283   2              temp_byte+=brightness;
 284   2            oled_Data(temp_byte);   
 285   2        }
 286   1        for(p = 0; p < 8;p++){//64 68 72 76
 287   2            temp_byte = 0x00;
 288   2            if(test_bit(arr20x32[64], p) > 0)
 289   2              temp_byte+=(brightness << 4);
 290   2            if(test_bit(arr20x32[68], p) > 0)
 291   2              temp_byte+=brightness;
 292   2            oled_Data(temp_byte);
 293   2            
 294   2            temp_byte = 0x00;
 295   2            if(test_bit(arr20x32[72], p) > 0)
 296   2              temp_byte+=(brightness << 4);
 297   2            if(test_bit(arr20x32[76], p) > 0)
 298   2              temp_byte+=brightness;
 299   2            oled_Data(temp_byte);   
 300   2        }
 301   1        for(p = 0; p < 8;p++){//65 69 73 77
 302   2            temp_byte = 0x00;
 303   2            if(test_bit(arr20x32[65], p) > 0)
 304   2              temp_byte+=(brightness << 4);
 305   2            if(test_bit(arr20x32[69], p) > 0)
 306   2              temp_byte+=brightness;
 307   2            oled_Data(temp_byte);
 308   2            
 309   2            temp_byte = 0x00;
 310   2            if(test_bit(arr20x32[73], p) > 0)
 311   2              temp_byte+=(brightness << 4);
 312   2            if(test_bit(arr20x32[77], p) > 0)
 313   2              temp_byte+=brightness;
 314   2            oled_Data(temp_byte);   
 315   2        }
 316   1        for(p = 0; p < 8;p++){//66 70 74 78
 317   2            temp_byte = 0x00;
 318   2            if(test_bit(arr20x32[66], p) > 0)
 319   2              temp_byte+=(brightness << 4);
 320   2            if(test_bit(arr20x32[70], p) > 0)
 321   2              temp_byte+=brightness;
 322   2            oled_Data(temp_byte);
 323   2            
C51 COMPILER V9.56.0.0   MIDDLEFONT                                                        06/03/2021 14:52:33 PAGE 7   

 324   2            temp_byte = 0x00;
 325   2            if(test_bit(arr20x32[74], p) > 0)
 326   2              temp_byte+=(brightness << 4);
 327   2            if(test_bit(arr20x32[78], p) > 0)
 328   2              temp_byte+=brightness;
 329   2            oled_Data(temp_byte);   
 330   2        }
 331   1        for(p = 0; p < 8;p++){//67 71 75 79
 332   2            temp_byte = 0x00;
 333   2            if(test_bit(arr20x32[67], p) > 0)
 334   2              temp_byte+=(brightness << 4);
 335   2            if(test_bit(arr20x32[71], p) > 0)
 336   2              temp_byte+=brightness;
 337   2            oled_Data(temp_byte);
 338   2            
 339   2            temp_byte = 0x00;
 340   2            if(test_bit(arr20x32[75], p) > 0)
 341   2              temp_byte+=(brightness << 4);
 342   2            if(test_bit(arr20x32[79], p) > 0)
 343   2              temp_byte+=brightness;
 344   2            oled_Data(temp_byte);   
 345   2        }
 346   1      }
 347                 
 348          void put_char_Font_Arial_20x32_on_Display(unsigned char ch, unsigned char col, unsigned char row, unsigned
             - char brightness){  
 349   1        switch(ch){
 350   2          case '0':drawChar_20x32_toDisplay_Array(zero_Arial_20x32, col, row, brightness);break;
 351   2          case '1':drawChar_20x32_toDisplay_Array(one_Arial_20x32, col, row, brightness);break;
 352   2          case '2':drawChar_20x32_toDisplay_Array(two_Arial_20x32, col, row, brightness);break;
 353   2          case '3':drawChar_20x32_toDisplay_Array(three_Arial_20x32, col, row, brightness);break;
 354   2          case '4':drawChar_20x32_toDisplay_Array(four_Arial_20x32, col, row, brightness);break;
 355   2          case '5':drawChar_20x32_toDisplay_Array(five_Arial_20x32, col, row, brightness);break;
 356   2          case '6':drawChar_20x32_toDisplay_Array(six_Arial_20x32, col, row, brightness);break;
 357   2          case '7':drawChar_20x32_toDisplay_Array(seven_Arial_20x32, col, row, brightness);break;
 358   2          case '8':drawChar_20x32_toDisplay_Array(eight_Arial_20x32, col, row, brightness);break;
 359   2          case '9':drawChar_20x32_toDisplay_Array(nine_Arial_20x32, col, row, brightness);break;
 360   2          case ' ':drawChar_20x32_toDisplay_Array(escape_Arial_20x32, col, row, brightness);break;
 361   2          default:break;
 362   2        }
 363   1      }
 364          void write_20x32_Arial_String(const unsigned char* arr, int arr_size, unsigned char col, unsigned char row
             -, unsigned char brightness){
 365   1        int i = 0;
 366   1        for(i = arr_size-1; i >= 0; i--){
 367   2          put_char_Font_Arial_20x32_on_Display(arr[i], col, row, brightness);
 368   2          col-=5.0;
 369   2        }
 370   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   4178    ----
   CONSTANT SIZE    =    880    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      3      20
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
